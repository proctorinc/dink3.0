/*
 * This file is generated by jOOQ.
 */
package com.dink3.jooq.tables;


import com.dink3.jooq.DefaultSchema;
import com.dink3.jooq.Keys;
import com.dink3.jooq.tables.records.InstitutionRecord;

import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.Name;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class Institution extends TableImpl<InstitutionRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>institution</code>
     */
    public static final Institution INSTITUTION = new Institution();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<InstitutionRecord> getRecordType() {
        return InstitutionRecord.class;
    }

    /**
     * The column <code>institution.id</code>.
     */
    public final TableField<InstitutionRecord, String> ID = createField(DSL.name("id"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>institution.plaid_institution_id</code>.
     */
    public final TableField<InstitutionRecord, String> PLAID_INSTITUTION_ID = createField(DSL.name("plaid_institution_id"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>institution.name</code>.
     */
    public final TableField<InstitutionRecord, String> NAME = createField(DSL.name("name"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>institution.logo</code>.
     */
    public final TableField<InstitutionRecord, String> LOGO = createField(DSL.name("logo"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>institution.primary_color</code>.
     */
    public final TableField<InstitutionRecord, String> PRIMARY_COLOR = createField(DSL.name("primary_color"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>institution.url</code>.
     */
    public final TableField<InstitutionRecord, String> URL = createField(DSL.name("url"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>institution.created_at</code>.
     */
    public final TableField<InstitutionRecord, String> CREATED_AT = createField(DSL.name("created_at"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>institution.updated_at</code>.
     */
    public final TableField<InstitutionRecord, String> UPDATED_AT = createField(DSL.name("updated_at"), SQLDataType.CLOB.nullable(false), this, "");

    private Institution(Name alias, Table<InstitutionRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private Institution(Name alias, Table<InstitutionRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>institution</code> table reference
     */
    public Institution(String alias) {
        this(DSL.name(alias), INSTITUTION);
    }

    /**
     * Create an aliased <code>institution</code> table reference
     */
    public Institution(Name alias) {
        this(alias, INSTITUTION);
    }

    /**
     * Create a <code>institution</code> table reference
     */
    public Institution() {
        this(DSL.name("institution"), null);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public UniqueKey<InstitutionRecord> getPrimaryKey() {
        return Keys.INSTITUTION__PK_INSTITUTION;
    }

    @Override
    public List<UniqueKey<InstitutionRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.INSTITUTION__UK_INSTITUTION_33047969);
    }

    @Override
    public Institution as(String alias) {
        return new Institution(DSL.name(alias), this);
    }

    @Override
    public Institution as(Name alias) {
        return new Institution(alias, this);
    }

    @Override
    public Institution as(Table<?> alias) {
        return new Institution(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Institution rename(String name) {
        return new Institution(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Institution rename(Name name) {
        return new Institution(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Institution rename(Table<?> name) {
        return new Institution(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Institution where(Condition condition) {
        return new Institution(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Institution where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Institution where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Institution where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Institution where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Institution where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Institution where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Institution where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Institution whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Institution whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
