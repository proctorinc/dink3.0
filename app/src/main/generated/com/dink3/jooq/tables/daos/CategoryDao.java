/*
 * This file is generated by jOOQ.
 */
package com.dink3.jooq.tables.daos;


import com.dink3.jooq.tables.Category;
import com.dink3.jooq.tables.records.CategoryRecord;

import java.util.List;
import java.util.Optional;

import org.jooq.Configuration;
import org.jooq.impl.DAOImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class CategoryDao extends DAOImpl<CategoryRecord, com.dink3.jooq.tables.pojos.Category, String> {

    /**
     * Create a new CategoryDao without any configuration
     */
    public CategoryDao() {
        super(Category.CATEGORY, com.dink3.jooq.tables.pojos.Category.class);
    }

    /**
     * Create a new CategoryDao with an attached configuration
     */
    public CategoryDao(Configuration configuration) {
        super(Category.CATEGORY, com.dink3.jooq.tables.pojos.Category.class, configuration);
    }

    @Override
    public String getId(com.dink3.jooq.tables.pojos.Category object) {
        return object.getId();
    }

    /**
     * Fetch records that have <code>id BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<com.dink3.jooq.tables.pojos.Category> fetchRangeOfId(String lowerInclusive, String upperInclusive) {
        return fetchRange(Category.CATEGORY.ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>id IN (values)</code>
     */
    public List<com.dink3.jooq.tables.pojos.Category> fetchById(String... values) {
        return fetch(Category.CATEGORY.ID, values);
    }

    /**
     * Fetch a unique record that has <code>id = value</code>
     */
    public com.dink3.jooq.tables.pojos.Category fetchOneById(String value) {
        return fetchOne(Category.CATEGORY.ID, value);
    }

    /**
     * Fetch a unique record that has <code>id = value</code>
     */
    public Optional<com.dink3.jooq.tables.pojos.Category> fetchOptionalById(String value) {
        return fetchOptional(Category.CATEGORY.ID, value);
    }

    /**
     * Fetch records that have <code>user_id BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<com.dink3.jooq.tables.pojos.Category> fetchRangeOfUserId(String lowerInclusive, String upperInclusive) {
        return fetchRange(Category.CATEGORY.USER_ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>user_id IN (values)</code>
     */
    public List<com.dink3.jooq.tables.pojos.Category> fetchByUserId(String... values) {
        return fetch(Category.CATEGORY.USER_ID, values);
    }

    /**
     * Fetch records that have <code>name BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<com.dink3.jooq.tables.pojos.Category> fetchRangeOfName(String lowerInclusive, String upperInclusive) {
        return fetchRange(Category.CATEGORY.NAME, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>name IN (values)</code>
     */
    public List<com.dink3.jooq.tables.pojos.Category> fetchByName(String... values) {
        return fetch(Category.CATEGORY.NAME, values);
    }

    /**
     * Fetch records that have <code>description BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<com.dink3.jooq.tables.pojos.Category> fetchRangeOfDescription(String lowerInclusive, String upperInclusive) {
        return fetchRange(Category.CATEGORY.DESCRIPTION, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>description IN (values)</code>
     */
    public List<com.dink3.jooq.tables.pojos.Category> fetchByDescription(String... values) {
        return fetch(Category.CATEGORY.DESCRIPTION, values);
    }

    /**
     * Fetch records that have <code>ignore BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<com.dink3.jooq.tables.pojos.Category> fetchRangeOfIgnore(Boolean lowerInclusive, Boolean upperInclusive) {
        return fetchRange(Category.CATEGORY.IGNORE, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>ignore IN (values)</code>
     */
    public List<com.dink3.jooq.tables.pojos.Category> fetchByIgnore(Boolean... values) {
        return fetch(Category.CATEGORY.IGNORE, values);
    }

    /**
     * Fetch records that have <code>hide BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<com.dink3.jooq.tables.pojos.Category> fetchRangeOfHide(Boolean lowerInclusive, Boolean upperInclusive) {
        return fetchRange(Category.CATEGORY.HIDE, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>hide IN (values)</code>
     */
    public List<com.dink3.jooq.tables.pojos.Category> fetchByHide(Boolean... values) {
        return fetch(Category.CATEGORY.HIDE, values);
    }

    /**
     * Fetch records that have <code>startDate BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<com.dink3.jooq.tables.pojos.Category> fetchRangeOfStartdate(String lowerInclusive, String upperInclusive) {
        return fetchRange(Category.CATEGORY.STARTDATE, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>startDate IN (values)</code>
     */
    public List<com.dink3.jooq.tables.pojos.Category> fetchByStartdate(String... values) {
        return fetch(Category.CATEGORY.STARTDATE, values);
    }

    /**
     * Fetch records that have <code>endDate BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<com.dink3.jooq.tables.pojos.Category> fetchRangeOfEnddate(String lowerInclusive, String upperInclusive) {
        return fetchRange(Category.CATEGORY.ENDDATE, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>endDate IN (values)</code>
     */
    public List<com.dink3.jooq.tables.pojos.Category> fetchByEnddate(String... values) {
        return fetch(Category.CATEGORY.ENDDATE, values);
    }
}
