/*
 * This file is generated by jOOQ.
 */
package com.dink3.jooq.tables;


import com.dink3.jooq.DefaultSchema;
import com.dink3.jooq.Indexes;
import com.dink3.jooq.Keys;
import com.dink3.jooq.tables.records.AccountsRecord;

import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class Accounts extends TableImpl<AccountsRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>accounts</code>
     */
    public static final Accounts ACCOUNTS = new Accounts();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<AccountsRecord> getRecordType() {
        return AccountsRecord.class;
    }

    /**
     * The column <code>accounts.id</code>.
     */
    public final TableField<AccountsRecord, String> ID = createField(DSL.name("id"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>accounts.plaid_item_id</code>.
     */
    public final TableField<AccountsRecord, String> PLAID_ITEM_ID = createField(DSL.name("plaid_item_id"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>accounts.plaid_account_id</code>.
     */
    public final TableField<AccountsRecord, String> PLAID_ACCOUNT_ID = createField(DSL.name("plaid_account_id"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>accounts.name</code>.
     */
    public final TableField<AccountsRecord, String> NAME = createField(DSL.name("name"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>accounts.mask</code>.
     */
    public final TableField<AccountsRecord, String> MASK = createField(DSL.name("mask"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>accounts.official_name</code>.
     */
    public final TableField<AccountsRecord, String> OFFICIAL_NAME = createField(DSL.name("official_name"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>accounts.type</code>.
     */
    public final TableField<AccountsRecord, String> TYPE = createField(DSL.name("type"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>accounts.subtype</code>.
     */
    public final TableField<AccountsRecord, String> SUBTYPE = createField(DSL.name("subtype"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>accounts.current_balance</code>.
     */
    public final TableField<AccountsRecord, Float> CURRENT_BALANCE = createField(DSL.name("current_balance"), SQLDataType.REAL, this, "");

    /**
     * The column <code>accounts.available_balance</code>.
     */
    public final TableField<AccountsRecord, Float> AVAILABLE_BALANCE = createField(DSL.name("available_balance"), SQLDataType.REAL, this, "");

    /**
     * The column <code>accounts.iso_currency_code</code>.
     */
    public final TableField<AccountsRecord, String> ISO_CURRENCY_CODE = createField(DSL.name("iso_currency_code"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>accounts.unofficial_currency_code</code>.
     */
    public final TableField<AccountsRecord, String> UNOFFICIAL_CURRENCY_CODE = createField(DSL.name("unofficial_currency_code"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>accounts.created_at</code>.
     */
    public final TableField<AccountsRecord, String> CREATED_AT = createField(DSL.name("created_at"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>accounts.updated_at</code>.
     */
    public final TableField<AccountsRecord, String> UPDATED_AT = createField(DSL.name("updated_at"), SQLDataType.CLOB.nullable(false), this, "");

    private Accounts(Name alias, Table<AccountsRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private Accounts(Name alias, Table<AccountsRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>accounts</code> table reference
     */
    public Accounts(String alias) {
        this(DSL.name(alias), ACCOUNTS);
    }

    /**
     * Create an aliased <code>accounts</code> table reference
     */
    public Accounts(Name alias) {
        this(alias, ACCOUNTS);
    }

    /**
     * Create a <code>accounts</code> table reference
     */
    public Accounts() {
        this(DSL.name("accounts"), null);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.IDX_ACCOUNTS_PLAID_ITEM_ID);
    }

    @Override
    public UniqueKey<AccountsRecord> getPrimaryKey() {
        return Keys.ACCOUNTS__PK_ACCOUNTS;
    }

    @Override
    public Accounts as(String alias) {
        return new Accounts(DSL.name(alias), this);
    }

    @Override
    public Accounts as(Name alias) {
        return new Accounts(alias, this);
    }

    @Override
    public Accounts as(Table<?> alias) {
        return new Accounts(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Accounts rename(String name) {
        return new Accounts(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Accounts rename(Name name) {
        return new Accounts(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Accounts rename(Table<?> name) {
        return new Accounts(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Accounts where(Condition condition) {
        return new Accounts(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Accounts where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Accounts where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Accounts where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Accounts where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Accounts where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Accounts where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Accounts where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Accounts whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Accounts whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
