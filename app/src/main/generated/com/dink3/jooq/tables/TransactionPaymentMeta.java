/*
 * This file is generated by jOOQ.
 */
package com.dink3.jooq.tables;


import com.dink3.jooq.DefaultSchema;
import com.dink3.jooq.Keys;
import com.dink3.jooq.tables.Transaction.TransactionPath;
import com.dink3.jooq.tables.records.TransactionPaymentMetaRecord;

import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class TransactionPaymentMeta extends TableImpl<TransactionPaymentMetaRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>transaction_payment_meta</code>
     */
    public static final TransactionPaymentMeta TRANSACTION_PAYMENT_META = new TransactionPaymentMeta();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<TransactionPaymentMetaRecord> getRecordType() {
        return TransactionPaymentMetaRecord.class;
    }

    /**
     * The column <code>transaction_payment_meta.id</code>.
     */
    public final TableField<TransactionPaymentMetaRecord, String> ID = createField(DSL.name("id"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>transaction_payment_meta.transaction_id</code>.
     */
    public final TableField<TransactionPaymentMetaRecord, String> TRANSACTION_ID = createField(DSL.name("transaction_id"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>transaction_payment_meta.reference_number</code>.
     */
    public final TableField<TransactionPaymentMetaRecord, String> REFERENCE_NUMBER = createField(DSL.name("reference_number"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>transaction_payment_meta.payer</code>.
     */
    public final TableField<TransactionPaymentMetaRecord, String> PAYER = createField(DSL.name("payer"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>transaction_payment_meta.payment_method</code>.
     */
    public final TableField<TransactionPaymentMetaRecord, String> PAYMENT_METHOD = createField(DSL.name("payment_method"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>transaction_payment_meta.payment_processor</code>.
     */
    public final TableField<TransactionPaymentMetaRecord, String> PAYMENT_PROCESSOR = createField(DSL.name("payment_processor"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>transaction_payment_meta.ppd_id</code>.
     */
    public final TableField<TransactionPaymentMetaRecord, String> PPD_ID = createField(DSL.name("ppd_id"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>transaction_payment_meta.reason</code>.
     */
    public final TableField<TransactionPaymentMetaRecord, String> REASON = createField(DSL.name("reason"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>transaction_payment_meta.by_order_of</code>.
     */
    public final TableField<TransactionPaymentMetaRecord, String> BY_ORDER_OF = createField(DSL.name("by_order_of"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>transaction_payment_meta.payee</code>.
     */
    public final TableField<TransactionPaymentMetaRecord, String> PAYEE = createField(DSL.name("payee"), SQLDataType.CLOB, this, "");

    private TransactionPaymentMeta(Name alias, Table<TransactionPaymentMetaRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private TransactionPaymentMeta(Name alias, Table<TransactionPaymentMetaRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>transaction_payment_meta</code> table reference
     */
    public TransactionPaymentMeta(String alias) {
        this(DSL.name(alias), TRANSACTION_PAYMENT_META);
    }

    /**
     * Create an aliased <code>transaction_payment_meta</code> table reference
     */
    public TransactionPaymentMeta(Name alias) {
        this(alias, TRANSACTION_PAYMENT_META);
    }

    /**
     * Create a <code>transaction_payment_meta</code> table reference
     */
    public TransactionPaymentMeta() {
        this(DSL.name("transaction_payment_meta"), null);
    }

    public <O extends Record> TransactionPaymentMeta(Table<O> path, ForeignKey<O, TransactionPaymentMetaRecord> childPath, InverseForeignKey<O, TransactionPaymentMetaRecord> parentPath) {
        super(path, childPath, parentPath, TRANSACTION_PAYMENT_META);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class TransactionPaymentMetaPath extends TransactionPaymentMeta implements Path<TransactionPaymentMetaRecord> {

        private static final long serialVersionUID = 1L;
        public <O extends Record> TransactionPaymentMetaPath(Table<O> path, ForeignKey<O, TransactionPaymentMetaRecord> childPath, InverseForeignKey<O, TransactionPaymentMetaRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private TransactionPaymentMetaPath(Name alias, Table<TransactionPaymentMetaRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public TransactionPaymentMetaPath as(String alias) {
            return new TransactionPaymentMetaPath(DSL.name(alias), this);
        }

        @Override
        public TransactionPaymentMetaPath as(Name alias) {
            return new TransactionPaymentMetaPath(alias, this);
        }

        @Override
        public TransactionPaymentMetaPath as(Table<?> alias) {
            return new TransactionPaymentMetaPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public UniqueKey<TransactionPaymentMetaRecord> getPrimaryKey() {
        return Keys.TRANSACTION_PAYMENT_META__PK_TRANSACTION_PAYMENT_META;
    }

    @Override
    public List<ForeignKey<TransactionPaymentMetaRecord, ?>> getReferences() {
        return Arrays.asList(Keys.TRANSACTION_PAYMENT_META__FK_TRANSACTION_PAYMENT_META_PK_TRANSACTION);
    }

    private transient TransactionPath _transaction;

    /**
     * Get the implicit join path to the <code>transaction</code> table.
     */
    public TransactionPath transaction() {
        if (_transaction == null)
            _transaction = new TransactionPath(this, Keys.TRANSACTION_PAYMENT_META__FK_TRANSACTION_PAYMENT_META_PK_TRANSACTION, null);

        return _transaction;
    }

    @Override
    public TransactionPaymentMeta as(String alias) {
        return new TransactionPaymentMeta(DSL.name(alias), this);
    }

    @Override
    public TransactionPaymentMeta as(Name alias) {
        return new TransactionPaymentMeta(alias, this);
    }

    @Override
    public TransactionPaymentMeta as(Table<?> alias) {
        return new TransactionPaymentMeta(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public TransactionPaymentMeta rename(String name) {
        return new TransactionPaymentMeta(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public TransactionPaymentMeta rename(Name name) {
        return new TransactionPaymentMeta(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public TransactionPaymentMeta rename(Table<?> name) {
        return new TransactionPaymentMeta(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public TransactionPaymentMeta where(Condition condition) {
        return new TransactionPaymentMeta(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public TransactionPaymentMeta where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public TransactionPaymentMeta where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public TransactionPaymentMeta where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public TransactionPaymentMeta where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public TransactionPaymentMeta where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public TransactionPaymentMeta where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public TransactionPaymentMeta where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public TransactionPaymentMeta whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public TransactionPaymentMeta whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
