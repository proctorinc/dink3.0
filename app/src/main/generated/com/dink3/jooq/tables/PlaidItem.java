/*
 * This file is generated by jOOQ.
 */
package com.dink3.jooq.tables;


import com.dink3.jooq.DefaultSchema;
import com.dink3.jooq.Indexes;
import com.dink3.jooq.Keys;
import com.dink3.jooq.tables.User.UserPath;
import com.dink3.jooq.tables.records.PlaidItemRecord;

import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class PlaidItem extends TableImpl<PlaidItemRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>plaid_item</code>
     */
    public static final PlaidItem PLAID_ITEM = new PlaidItem();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<PlaidItemRecord> getRecordType() {
        return PlaidItemRecord.class;
    }

    /**
     * The column <code>plaid_item.id</code>.
     */
    public final TableField<PlaidItemRecord, String> ID = createField(DSL.name("id"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>plaid_item.user_id</code>.
     */
    public final TableField<PlaidItemRecord, String> USER_ID = createField(DSL.name("user_id"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>plaid_item.plaid_item_id</code>.
     */
    public final TableField<PlaidItemRecord, String> PLAID_ITEM_ID = createField(DSL.name("plaid_item_id"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>plaid_item.plaid_access_token</code>.
     */
    public final TableField<PlaidItemRecord, String> PLAID_ACCESS_TOKEN = createField(DSL.name("plaid_access_token"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>plaid_item.plaid_institution_id</code>.
     */
    public final TableField<PlaidItemRecord, String> PLAID_INSTITUTION_ID = createField(DSL.name("plaid_institution_id"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>plaid_item.status</code>.
     */
    public final TableField<PlaidItemRecord, String> STATUS = createField(DSL.name("status"), SQLDataType.CLOB.nullable(false).defaultValue(DSL.field(DSL.raw("'good'"), SQLDataType.CLOB)), this, "");

    /**
     * The column <code>plaid_item.last_webhook</code>.
     */
    public final TableField<PlaidItemRecord, String> LAST_WEBHOOK = createField(DSL.name("last_webhook"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>plaid_item.created_at</code>.
     */
    public final TableField<PlaidItemRecord, String> CREATED_AT = createField(DSL.name("created_at"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>plaid_item.updated_at</code>.
     */
    public final TableField<PlaidItemRecord, String> UPDATED_AT = createField(DSL.name("updated_at"), SQLDataType.CLOB.nullable(false), this, "");

    private PlaidItem(Name alias, Table<PlaidItemRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private PlaidItem(Name alias, Table<PlaidItemRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>plaid_item</code> table reference
     */
    public PlaidItem(String alias) {
        this(DSL.name(alias), PLAID_ITEM);
    }

    /**
     * Create an aliased <code>plaid_item</code> table reference
     */
    public PlaidItem(Name alias) {
        this(alias, PLAID_ITEM);
    }

    /**
     * Create a <code>plaid_item</code> table reference
     */
    public PlaidItem() {
        this(DSL.name("plaid_item"), null);
    }

    public <O extends Record> PlaidItem(Table<O> path, ForeignKey<O, PlaidItemRecord> childPath, InverseForeignKey<O, PlaidItemRecord> parentPath) {
        super(path, childPath, parentPath, PLAID_ITEM);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class PlaidItemPath extends PlaidItem implements Path<PlaidItemRecord> {

        private static final long serialVersionUID = 1L;
        public <O extends Record> PlaidItemPath(Table<O> path, ForeignKey<O, PlaidItemRecord> childPath, InverseForeignKey<O, PlaidItemRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private PlaidItemPath(Name alias, Table<PlaidItemRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public PlaidItemPath as(String alias) {
            return new PlaidItemPath(DSL.name(alias), this);
        }

        @Override
        public PlaidItemPath as(Name alias) {
            return new PlaidItemPath(alias, this);
        }

        @Override
        public PlaidItemPath as(Table<?> alias) {
            return new PlaidItemPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.IDX_PLAID_ITEMS_USER_ID);
    }

    @Override
    public UniqueKey<PlaidItemRecord> getPrimaryKey() {
        return Keys.PLAID_ITEM__PK_PLAID_ITEM;
    }

    @Override
    public List<ForeignKey<PlaidItemRecord, ?>> getReferences() {
        return Arrays.asList(Keys.PLAID_ITEM__FK_PLAID_ITEM_PK_USER);
    }

    private transient UserPath _user;

    /**
     * Get the implicit join path to the <code>user</code> table.
     */
    public UserPath user() {
        if (_user == null)
            _user = new UserPath(this, Keys.PLAID_ITEM__FK_PLAID_ITEM_PK_USER, null);

        return _user;
    }

    @Override
    public PlaidItem as(String alias) {
        return new PlaidItem(DSL.name(alias), this);
    }

    @Override
    public PlaidItem as(Name alias) {
        return new PlaidItem(alias, this);
    }

    @Override
    public PlaidItem as(Table<?> alias) {
        return new PlaidItem(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public PlaidItem rename(String name) {
        return new PlaidItem(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public PlaidItem rename(Name name) {
        return new PlaidItem(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public PlaidItem rename(Table<?> name) {
        return new PlaidItem(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public PlaidItem where(Condition condition) {
        return new PlaidItem(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public PlaidItem where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public PlaidItem where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public PlaidItem where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public PlaidItem where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public PlaidItem where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public PlaidItem where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public PlaidItem where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public PlaidItem whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public PlaidItem whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
