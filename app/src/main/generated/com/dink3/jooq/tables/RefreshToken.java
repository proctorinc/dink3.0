/*
 * This file is generated by jOOQ.
 */
package com.dink3.jooq.tables;


import com.dink3.jooq.DefaultSchema;
import com.dink3.jooq.Keys;
import com.dink3.jooq.tables.User.UserPath;
import com.dink3.jooq.tables.records.RefreshTokenRecord;

import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class RefreshToken extends TableImpl<RefreshTokenRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>refresh_token</code>
     */
    public static final RefreshToken REFRESH_TOKEN = new RefreshToken();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<RefreshTokenRecord> getRecordType() {
        return RefreshTokenRecord.class;
    }

    /**
     * The column <code>refresh_token.id</code>.
     */
    public final TableField<RefreshTokenRecord, String> ID = createField(DSL.name("id"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>refresh_token.user_id</code>.
     */
    public final TableField<RefreshTokenRecord, String> USER_ID = createField(DSL.name("user_id"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>refresh_token.token</code>.
     */
    public final TableField<RefreshTokenRecord, String> TOKEN = createField(DSL.name("token"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>refresh_token.expires_at</code>.
     */
    public final TableField<RefreshTokenRecord, String> EXPIRES_AT = createField(DSL.name("expires_at"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>refresh_token.created_at</code>.
     */
    public final TableField<RefreshTokenRecord, String> CREATED_AT = createField(DSL.name("created_at"), SQLDataType.CLOB.nullable(false), this, "");

    private RefreshToken(Name alias, Table<RefreshTokenRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private RefreshToken(Name alias, Table<RefreshTokenRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>refresh_token</code> table reference
     */
    public RefreshToken(String alias) {
        this(DSL.name(alias), REFRESH_TOKEN);
    }

    /**
     * Create an aliased <code>refresh_token</code> table reference
     */
    public RefreshToken(Name alias) {
        this(alias, REFRESH_TOKEN);
    }

    /**
     * Create a <code>refresh_token</code> table reference
     */
    public RefreshToken() {
        this(DSL.name("refresh_token"), null);
    }

    public <O extends Record> RefreshToken(Table<O> path, ForeignKey<O, RefreshTokenRecord> childPath, InverseForeignKey<O, RefreshTokenRecord> parentPath) {
        super(path, childPath, parentPath, REFRESH_TOKEN);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class RefreshTokenPath extends RefreshToken implements Path<RefreshTokenRecord> {

        private static final long serialVersionUID = 1L;
        public <O extends Record> RefreshTokenPath(Table<O> path, ForeignKey<O, RefreshTokenRecord> childPath, InverseForeignKey<O, RefreshTokenRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private RefreshTokenPath(Name alias, Table<RefreshTokenRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public RefreshTokenPath as(String alias) {
            return new RefreshTokenPath(DSL.name(alias), this);
        }

        @Override
        public RefreshTokenPath as(Name alias) {
            return new RefreshTokenPath(alias, this);
        }

        @Override
        public RefreshTokenPath as(Table<?> alias) {
            return new RefreshTokenPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public UniqueKey<RefreshTokenRecord> getPrimaryKey() {
        return Keys.REFRESH_TOKEN__PK_REFRESH_TOKEN;
    }

    @Override
    public List<ForeignKey<RefreshTokenRecord, ?>> getReferences() {
        return Arrays.asList(Keys.REFRESH_TOKEN__FK_REFRESH_TOKEN_PK_USER);
    }

    private transient UserPath _user;

    /**
     * Get the implicit join path to the <code>user</code> table.
     */
    public UserPath user() {
        if (_user == null)
            _user = new UserPath(this, Keys.REFRESH_TOKEN__FK_REFRESH_TOKEN_PK_USER, null);

        return _user;
    }

    @Override
    public RefreshToken as(String alias) {
        return new RefreshToken(DSL.name(alias), this);
    }

    @Override
    public RefreshToken as(Name alias) {
        return new RefreshToken(alias, this);
    }

    @Override
    public RefreshToken as(Table<?> alias) {
        return new RefreshToken(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public RefreshToken rename(String name) {
        return new RefreshToken(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public RefreshToken rename(Name name) {
        return new RefreshToken(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public RefreshToken rename(Table<?> name) {
        return new RefreshToken(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public RefreshToken where(Condition condition) {
        return new RefreshToken(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public RefreshToken where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public RefreshToken where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public RefreshToken where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public RefreshToken where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public RefreshToken where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public RefreshToken where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public RefreshToken where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public RefreshToken whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public RefreshToken whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
