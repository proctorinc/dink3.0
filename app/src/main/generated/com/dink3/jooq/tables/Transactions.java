/*
 * This file is generated by jOOQ.
 */
package com.dink3.jooq.tables;


import com.dink3.jooq.DefaultSchema;
import com.dink3.jooq.Indexes;
import com.dink3.jooq.Keys;
import com.dink3.jooq.tables.records.TransactionsRecord;

import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class Transactions extends TableImpl<TransactionsRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>transactions</code>
     */
    public static final Transactions TRANSACTIONS = new Transactions();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<TransactionsRecord> getRecordType() {
        return TransactionsRecord.class;
    }

    /**
     * The column <code>transactions.id</code>.
     */
    public final TableField<TransactionsRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.identity(true), this, "");

    /**
     * The column <code>transactions.plaid_transaction_id</code>.
     */
    public final TableField<TransactionsRecord, String> PLAID_TRANSACTION_ID = createField(DSL.name("plaid_transaction_id"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>transactions.plaid_account_id</code>.
     */
    public final TableField<TransactionsRecord, String> PLAID_ACCOUNT_ID = createField(DSL.name("plaid_account_id"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>transactions.amount</code>.
     */
    public final TableField<TransactionsRecord, Float> AMOUNT = createField(DSL.name("amount"), SQLDataType.REAL.nullable(false), this, "");

    /**
     * The column <code>transactions.iso_currency_code</code>.
     */
    public final TableField<TransactionsRecord, String> ISO_CURRENCY_CODE = createField(DSL.name("iso_currency_code"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>transactions.unofficial_currency_code</code>.
     */
    public final TableField<TransactionsRecord, String> UNOFFICIAL_CURRENCY_CODE = createField(DSL.name("unofficial_currency_code"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>transactions.date</code>.
     */
    public final TableField<TransactionsRecord, String> DATE = createField(DSL.name("date"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>transactions.datetime</code>.
     */
    public final TableField<TransactionsRecord, String> DATETIME = createField(DSL.name("datetime"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>transactions.name</code>.
     */
    public final TableField<TransactionsRecord, String> NAME = createField(DSL.name("name"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>transactions.merchant_name</code>.
     */
    public final TableField<TransactionsRecord, String> MERCHANT_NAME = createField(DSL.name("merchant_name"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>transactions.payment_channel</code>.
     */
    public final TableField<TransactionsRecord, String> PAYMENT_CHANNEL = createField(DSL.name("payment_channel"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>transactions.pending</code>.
     */
    public final TableField<TransactionsRecord, Boolean> PENDING = createField(DSL.name("pending"), SQLDataType.BOOLEAN.nullable(false).defaultValue(DSL.field(DSL.raw("0"), SQLDataType.BOOLEAN)), this, "");

    /**
     * The column <code>transactions.pending_transaction_id</code>.
     */
    public final TableField<TransactionsRecord, String> PENDING_TRANSACTION_ID = createField(DSL.name("pending_transaction_id"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>transactions.account_owner</code>.
     */
    public final TableField<TransactionsRecord, String> ACCOUNT_OWNER = createField(DSL.name("account_owner"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>transactions.category_id</code>.
     */
    public final TableField<TransactionsRecord, String> CATEGORY_ID = createField(DSL.name("category_id"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>transactions.category</code>.
     */
    public final TableField<TransactionsRecord, String> CATEGORY = createField(DSL.name("category"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>transactions.location_address</code>.
     */
    public final TableField<TransactionsRecord, String> LOCATION_ADDRESS = createField(DSL.name("location_address"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>transactions.location_city</code>.
     */
    public final TableField<TransactionsRecord, String> LOCATION_CITY = createField(DSL.name("location_city"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>transactions.location_region</code>.
     */
    public final TableField<TransactionsRecord, String> LOCATION_REGION = createField(DSL.name("location_region"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>transactions.location_postal_code</code>.
     */
    public final TableField<TransactionsRecord, String> LOCATION_POSTAL_CODE = createField(DSL.name("location_postal_code"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>transactions.location_country</code>.
     */
    public final TableField<TransactionsRecord, String> LOCATION_COUNTRY = createField(DSL.name("location_country"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>transactions.location_lat</code>.
     */
    public final TableField<TransactionsRecord, Float> LOCATION_LAT = createField(DSL.name("location_lat"), SQLDataType.REAL, this, "");

    /**
     * The column <code>transactions.location_lon</code>.
     */
    public final TableField<TransactionsRecord, Float> LOCATION_LON = createField(DSL.name("location_lon"), SQLDataType.REAL, this, "");

    /**
     * The column <code>transactions.payment_meta_reference_number</code>.
     */
    public final TableField<TransactionsRecord, String> PAYMENT_META_REFERENCE_NUMBER = createField(DSL.name("payment_meta_reference_number"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>transactions.payment_meta_payer</code>.
     */
    public final TableField<TransactionsRecord, String> PAYMENT_META_PAYER = createField(DSL.name("payment_meta_payer"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>transactions.payment_meta_payment_method</code>.
     */
    public final TableField<TransactionsRecord, String> PAYMENT_META_PAYMENT_METHOD = createField(DSL.name("payment_meta_payment_method"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>transactions.payment_meta_payment_processor</code>.
     */
    public final TableField<TransactionsRecord, String> PAYMENT_META_PAYMENT_PROCESSOR = createField(DSL.name("payment_meta_payment_processor"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>transactions.payment_meta_ppd_id</code>.
     */
    public final TableField<TransactionsRecord, String> PAYMENT_META_PPD_ID = createField(DSL.name("payment_meta_ppd_id"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>transactions.payment_meta_reason</code>.
     */
    public final TableField<TransactionsRecord, String> PAYMENT_META_REASON = createField(DSL.name("payment_meta_reason"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>transactions.payment_meta_by_order_of</code>.
     */
    public final TableField<TransactionsRecord, String> PAYMENT_META_BY_ORDER_OF = createField(DSL.name("payment_meta_by_order_of"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>transactions.payment_meta_payee</code>.
     */
    public final TableField<TransactionsRecord, String> PAYMENT_META_PAYEE = createField(DSL.name("payment_meta_payee"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>transactions.created_at</code>.
     */
    public final TableField<TransactionsRecord, String> CREATED_AT = createField(DSL.name("created_at"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>transactions.updated_at</code>.
     */
    public final TableField<TransactionsRecord, String> UPDATED_AT = createField(DSL.name("updated_at"), SQLDataType.CLOB.nullable(false), this, "");

    private Transactions(Name alias, Table<TransactionsRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private Transactions(Name alias, Table<TransactionsRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>transactions</code> table reference
     */
    public Transactions(String alias) {
        this(DSL.name(alias), TRANSACTIONS);
    }

    /**
     * Create an aliased <code>transactions</code> table reference
     */
    public Transactions(Name alias) {
        this(alias, TRANSACTIONS);
    }

    /**
     * Create a <code>transactions</code> table reference
     */
    public Transactions() {
        this(DSL.name("transactions"), null);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.IDX_TRANSACTIONS_DATE, Indexes.IDX_TRANSACTIONS_PLAID_ACCOUNT_ID);
    }

    @Override
    public Identity<TransactionsRecord, Integer> getIdentity() {
        return (Identity<TransactionsRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<TransactionsRecord> getPrimaryKey() {
        return Keys.TRANSACTIONS__PK_TRANSACTIONS;
    }

    @Override
    public Transactions as(String alias) {
        return new Transactions(DSL.name(alias), this);
    }

    @Override
    public Transactions as(Name alias) {
        return new Transactions(alias, this);
    }

    @Override
    public Transactions as(Table<?> alias) {
        return new Transactions(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Transactions rename(String name) {
        return new Transactions(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Transactions rename(Name name) {
        return new Transactions(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Transactions rename(Table<?> name) {
        return new Transactions(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Transactions where(Condition condition) {
        return new Transactions(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Transactions where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Transactions where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Transactions where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Transactions where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Transactions where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Transactions where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Transactions where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Transactions whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Transactions whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
