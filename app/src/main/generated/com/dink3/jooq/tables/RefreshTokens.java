/*
 * This file is generated by jOOQ.
 */
package com.dink3.jooq.tables;


import com.dink3.jooq.DefaultSchema;
import com.dink3.jooq.Keys;
import com.dink3.jooq.tables.Users.UsersPath;
import com.dink3.jooq.tables.records.RefreshTokensRecord;

import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class RefreshTokens extends TableImpl<RefreshTokensRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>refresh_tokens</code>
     */
    public static final RefreshTokens REFRESH_TOKENS = new RefreshTokens();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<RefreshTokensRecord> getRecordType() {
        return RefreshTokensRecord.class;
    }

    /**
     * The column <code>refresh_tokens.id</code>.
     */
    public final TableField<RefreshTokensRecord, String> ID = createField(DSL.name("id"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>refresh_tokens.user_id</code>.
     */
    public final TableField<RefreshTokensRecord, String> USER_ID = createField(DSL.name("user_id"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>refresh_tokens.token</code>.
     */
    public final TableField<RefreshTokensRecord, String> TOKEN = createField(DSL.name("token"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>refresh_tokens.expires_at</code>.
     */
    public final TableField<RefreshTokensRecord, String> EXPIRES_AT = createField(DSL.name("expires_at"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>refresh_tokens.created_at</code>.
     */
    public final TableField<RefreshTokensRecord, String> CREATED_AT = createField(DSL.name("created_at"), SQLDataType.CLOB.nullable(false), this, "");

    private RefreshTokens(Name alias, Table<RefreshTokensRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private RefreshTokens(Name alias, Table<RefreshTokensRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>refresh_tokens</code> table reference
     */
    public RefreshTokens(String alias) {
        this(DSL.name(alias), REFRESH_TOKENS);
    }

    /**
     * Create an aliased <code>refresh_tokens</code> table reference
     */
    public RefreshTokens(Name alias) {
        this(alias, REFRESH_TOKENS);
    }

    /**
     * Create a <code>refresh_tokens</code> table reference
     */
    public RefreshTokens() {
        this(DSL.name("refresh_tokens"), null);
    }

    public <O extends Record> RefreshTokens(Table<O> path, ForeignKey<O, RefreshTokensRecord> childPath, InverseForeignKey<O, RefreshTokensRecord> parentPath) {
        super(path, childPath, parentPath, REFRESH_TOKENS);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class RefreshTokensPath extends RefreshTokens implements Path<RefreshTokensRecord> {

        private static final long serialVersionUID = 1L;
        public <O extends Record> RefreshTokensPath(Table<O> path, ForeignKey<O, RefreshTokensRecord> childPath, InverseForeignKey<O, RefreshTokensRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private RefreshTokensPath(Name alias, Table<RefreshTokensRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public RefreshTokensPath as(String alias) {
            return new RefreshTokensPath(DSL.name(alias), this);
        }

        @Override
        public RefreshTokensPath as(Name alias) {
            return new RefreshTokensPath(alias, this);
        }

        @Override
        public RefreshTokensPath as(Table<?> alias) {
            return new RefreshTokensPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public UniqueKey<RefreshTokensRecord> getPrimaryKey() {
        return Keys.REFRESH_TOKENS__PK_REFRESH_TOKENS;
    }

    @Override
    public List<ForeignKey<RefreshTokensRecord, ?>> getReferences() {
        return Arrays.asList(Keys.REFRESH_TOKENS__FK_REFRESH_TOKENS_PK_USERS);
    }

    private transient UsersPath _users;

    /**
     * Get the implicit join path to the <code>users</code> table.
     */
    public UsersPath users() {
        if (_users == null)
            _users = new UsersPath(this, Keys.REFRESH_TOKENS__FK_REFRESH_TOKENS_PK_USERS, null);

        return _users;
    }

    @Override
    public RefreshTokens as(String alias) {
        return new RefreshTokens(DSL.name(alias), this);
    }

    @Override
    public RefreshTokens as(Name alias) {
        return new RefreshTokens(alias, this);
    }

    @Override
    public RefreshTokens as(Table<?> alias) {
        return new RefreshTokens(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public RefreshTokens rename(String name) {
        return new RefreshTokens(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public RefreshTokens rename(Name name) {
        return new RefreshTokens(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public RefreshTokens rename(Table<?> name) {
        return new RefreshTokens(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public RefreshTokens where(Condition condition) {
        return new RefreshTokens(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public RefreshTokens where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public RefreshTokens where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public RefreshTokens where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public RefreshTokens where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public RefreshTokens where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public RefreshTokens where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public RefreshTokens where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public RefreshTokens whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public RefreshTokens whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
