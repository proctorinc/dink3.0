/*
 * This file is generated by jOOQ.
 */
package com.dink3.jooq.tables;


import com.dink3.jooq.DefaultSchema;
import com.dink3.jooq.Indexes;
import com.dink3.jooq.Keys;
import com.dink3.jooq.tables.Users.UsersPath;
import com.dink3.jooq.tables.records.UserSubscriptionsRecord;

import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class UserSubscriptions extends TableImpl<UserSubscriptionsRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>user_subscriptions</code>
     */
    public static final UserSubscriptions USER_SUBSCRIPTIONS = new UserSubscriptions();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<UserSubscriptionsRecord> getRecordType() {
        return UserSubscriptionsRecord.class;
    }

    /**
     * The column <code>user_subscriptions.id</code>.
     */
    public final TableField<UserSubscriptionsRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.identity(true), this, "");

    /**
     * The column <code>user_subscriptions.user_id</code>.
     */
    public final TableField<UserSubscriptionsRecord, Integer> USER_ID = createField(DSL.name("user_id"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>user_subscriptions.tier</code>.
     */
    public final TableField<UserSubscriptionsRecord, String> TIER = createField(DSL.name("tier"), SQLDataType.CLOB.nullable(false).defaultValue(DSL.field(DSL.raw("'basic'"), SQLDataType.CLOB)), this, "");

    /**
     * The column <code>user_subscriptions.last_sync_at</code>.
     */
    public final TableField<UserSubscriptionsRecord, String> LAST_SYNC_AT = createField(DSL.name("last_sync_at"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>user_subscriptions.created_at</code>.
     */
    public final TableField<UserSubscriptionsRecord, String> CREATED_AT = createField(DSL.name("created_at"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>user_subscriptions.updated_at</code>.
     */
    public final TableField<UserSubscriptionsRecord, String> UPDATED_AT = createField(DSL.name("updated_at"), SQLDataType.CLOB.nullable(false), this, "");

    private UserSubscriptions(Name alias, Table<UserSubscriptionsRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private UserSubscriptions(Name alias, Table<UserSubscriptionsRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>user_subscriptions</code> table reference
     */
    public UserSubscriptions(String alias) {
        this(DSL.name(alias), USER_SUBSCRIPTIONS);
    }

    /**
     * Create an aliased <code>user_subscriptions</code> table reference
     */
    public UserSubscriptions(Name alias) {
        this(alias, USER_SUBSCRIPTIONS);
    }

    /**
     * Create a <code>user_subscriptions</code> table reference
     */
    public UserSubscriptions() {
        this(DSL.name("user_subscriptions"), null);
    }

    public <O extends Record> UserSubscriptions(Table<O> path, ForeignKey<O, UserSubscriptionsRecord> childPath, InverseForeignKey<O, UserSubscriptionsRecord> parentPath) {
        super(path, childPath, parentPath, USER_SUBSCRIPTIONS);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class UserSubscriptionsPath extends UserSubscriptions implements Path<UserSubscriptionsRecord> {

        private static final long serialVersionUID = 1L;
        public <O extends Record> UserSubscriptionsPath(Table<O> path, ForeignKey<O, UserSubscriptionsRecord> childPath, InverseForeignKey<O, UserSubscriptionsRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private UserSubscriptionsPath(Name alias, Table<UserSubscriptionsRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public UserSubscriptionsPath as(String alias) {
            return new UserSubscriptionsPath(DSL.name(alias), this);
        }

        @Override
        public UserSubscriptionsPath as(Name alias) {
            return new UserSubscriptionsPath(alias, this);
        }

        @Override
        public UserSubscriptionsPath as(Table<?> alias) {
            return new UserSubscriptionsPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.IDX_USER_SUBSCRIPTIONS_USER_ID);
    }

    @Override
    public Identity<UserSubscriptionsRecord, Integer> getIdentity() {
        return (Identity<UserSubscriptionsRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<UserSubscriptionsRecord> getPrimaryKey() {
        return Keys.USER_SUBSCRIPTIONS__PK_USER_SUBSCRIPTIONS;
    }

    @Override
    public List<ForeignKey<UserSubscriptionsRecord, ?>> getReferences() {
        return Arrays.asList(Keys.USER_SUBSCRIPTIONS__FK_USER_SUBSCRIPTIONS_PK_USERS);
    }

    private transient UsersPath _users;

    /**
     * Get the implicit join path to the <code>users</code> table.
     */
    public UsersPath users() {
        if (_users == null)
            _users = new UsersPath(this, Keys.USER_SUBSCRIPTIONS__FK_USER_SUBSCRIPTIONS_PK_USERS, null);

        return _users;
    }

    @Override
    public UserSubscriptions as(String alias) {
        return new UserSubscriptions(DSL.name(alias), this);
    }

    @Override
    public UserSubscriptions as(Name alias) {
        return new UserSubscriptions(alias, this);
    }

    @Override
    public UserSubscriptions as(Table<?> alias) {
        return new UserSubscriptions(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public UserSubscriptions rename(String name) {
        return new UserSubscriptions(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public UserSubscriptions rename(Name name) {
        return new UserSubscriptions(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public UserSubscriptions rename(Table<?> name) {
        return new UserSubscriptions(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public UserSubscriptions where(Condition condition) {
        return new UserSubscriptions(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public UserSubscriptions where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public UserSubscriptions where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public UserSubscriptions where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public UserSubscriptions where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public UserSubscriptions where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public UserSubscriptions where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public UserSubscriptions where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public UserSubscriptions whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public UserSubscriptions whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
