/*
 * This file is generated by jOOQ.
 */
package com.dink3.jooq;


import com.dink3.jooq.tables.Account;
import com.dink3.jooq.tables.Category;
import com.dink3.jooq.tables.Institution;
import com.dink3.jooq.tables.PlaidItem;
import com.dink3.jooq.tables.RefreshToken;
import com.dink3.jooq.tables.Transaction;
import com.dink3.jooq.tables.TransactionLocation;
import com.dink3.jooq.tables.TransactionPaymentMeta;
import com.dink3.jooq.tables.User;
import com.dink3.jooq.tables.UserSubscription;
import com.dink3.jooq.tables.records.AccountRecord;
import com.dink3.jooq.tables.records.CategoryRecord;
import com.dink3.jooq.tables.records.InstitutionRecord;
import com.dink3.jooq.tables.records.PlaidItemRecord;
import com.dink3.jooq.tables.records.RefreshTokenRecord;
import com.dink3.jooq.tables.records.TransactionLocationRecord;
import com.dink3.jooq.tables.records.TransactionPaymentMetaRecord;
import com.dink3.jooq.tables.records.TransactionRecord;
import com.dink3.jooq.tables.records.UserRecord;
import com.dink3.jooq.tables.records.UserSubscriptionRecord;

import org.jooq.ForeignKey;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.Internal;


/**
 * A class modelling foreign key relationships and constraints of tables in the
 * default schema.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class Keys {

    // -------------------------------------------------------------------------
    // UNIQUE and PRIMARY KEY definitions
    // -------------------------------------------------------------------------

    public static final UniqueKey<AccountRecord> ACCOUNT__PK_ACCOUNT = Internal.createUniqueKey(Account.ACCOUNT, DSL.name("pk_account"), new TableField[] { Account.ACCOUNT.ID }, true);
    public static final UniqueKey<CategoryRecord> CATEGORY__PK_CATEGORY = Internal.createUniqueKey(Category.CATEGORY, DSL.name("pk_category"), new TableField[] { Category.CATEGORY.ID }, true);
    public static final UniqueKey<InstitutionRecord> INSTITUTION__PK_INSTITUTION = Internal.createUniqueKey(Institution.INSTITUTION, DSL.name("pk_institution"), new TableField[] { Institution.INSTITUTION.ID }, true);
    public static final UniqueKey<InstitutionRecord> INSTITUTION__UK_INSTITUTION_33047969 = Internal.createUniqueKey(Institution.INSTITUTION, DSL.name("uk_institution_33047969"), new TableField[] { Institution.INSTITUTION.PLAID_INSTITUTION_ID }, true);
    public static final UniqueKey<PlaidItemRecord> PLAID_ITEM__PK_PLAID_ITEM = Internal.createUniqueKey(PlaidItem.PLAID_ITEM, DSL.name("pk_plaid_item"), new TableField[] { PlaidItem.PLAID_ITEM.ID }, true);
    public static final UniqueKey<RefreshTokenRecord> REFRESH_TOKEN__PK_REFRESH_TOKEN = Internal.createUniqueKey(RefreshToken.REFRESH_TOKEN, DSL.name("pk_refresh_token"), new TableField[] { RefreshToken.REFRESH_TOKEN.ID }, true);
    public static final UniqueKey<TransactionRecord> TRANSACTION__PK_TRANSACTION = Internal.createUniqueKey(Transaction.TRANSACTION, DSL.name("pk_transaction"), new TableField[] { Transaction.TRANSACTION.ID }, true);
    public static final UniqueKey<TransactionLocationRecord> TRANSACTION_LOCATION__PK_TRANSACTION_LOCATION = Internal.createUniqueKey(TransactionLocation.TRANSACTION_LOCATION, DSL.name("pk_transaction_location"), new TableField[] { TransactionLocation.TRANSACTION_LOCATION.ID }, true);
    public static final UniqueKey<TransactionPaymentMetaRecord> TRANSACTION_PAYMENT_META__PK_TRANSACTION_PAYMENT_META = Internal.createUniqueKey(TransactionPaymentMeta.TRANSACTION_PAYMENT_META, DSL.name("pk_transaction_payment_meta"), new TableField[] { TransactionPaymentMeta.TRANSACTION_PAYMENT_META.ID }, true);
    public static final UniqueKey<UserRecord> USER__PK_USER = Internal.createUniqueKey(User.USER, DSL.name("pk_user"), new TableField[] { User.USER.ID }, true);
    public static final UniqueKey<UserRecord> USER__UK_USER_29017231 = Internal.createUniqueKey(User.USER, DSL.name("uk_user_29017231"), new TableField[] { User.USER.EMAIL }, true);
    public static final UniqueKey<UserSubscriptionRecord> USER_SUBSCRIPTION__PK_USER_SUBSCRIPTION = Internal.createUniqueKey(UserSubscription.USER_SUBSCRIPTION, DSL.name("pk_user_subscription"), new TableField[] { UserSubscription.USER_SUBSCRIPTION.ID }, true);

    // -------------------------------------------------------------------------
    // FOREIGN KEY definitions
    // -------------------------------------------------------------------------

    public static final ForeignKey<AccountRecord, UserRecord> ACCOUNT__FK_ACCOUNT_PK_USER = Internal.createForeignKey(Account.ACCOUNT, DSL.name("fk_account_pk_user"), new TableField[] { Account.ACCOUNT.USER_ID }, Keys.USER__PK_USER, new TableField[] { User.USER.ID }, true);
    public static final ForeignKey<CategoryRecord, UserRecord> CATEGORY__FK_CATEGORY_PK_USER = Internal.createForeignKey(Category.CATEGORY, DSL.name("fk_category_pk_user"), new TableField[] { Category.CATEGORY.USER_ID }, Keys.USER__PK_USER, new TableField[] { User.USER.ID }, true);
    public static final ForeignKey<PlaidItemRecord, UserRecord> PLAID_ITEM__FK_PLAID_ITEM_PK_USER = Internal.createForeignKey(PlaidItem.PLAID_ITEM, DSL.name("fk_plaid_item_pk_user"), new TableField[] { PlaidItem.PLAID_ITEM.USER_ID }, Keys.USER__PK_USER, new TableField[] { User.USER.ID }, true);
    public static final ForeignKey<RefreshTokenRecord, UserRecord> REFRESH_TOKEN__FK_REFRESH_TOKEN_PK_USER = Internal.createForeignKey(RefreshToken.REFRESH_TOKEN, DSL.name("fk_refresh_token_pk_user"), new TableField[] { RefreshToken.REFRESH_TOKEN.USER_ID }, Keys.USER__PK_USER, new TableField[] { User.USER.ID }, true);
    public static final ForeignKey<TransactionRecord, CategoryRecord> TRANSACTION__FK_TRANSACTION_PK_CATEGORY = Internal.createForeignKey(Transaction.TRANSACTION, DSL.name("fk_transaction_pk_category"), new TableField[] { Transaction.TRANSACTION.CATEGORY_ID }, Keys.CATEGORY__PK_CATEGORY, new TableField[] { Category.CATEGORY.ID }, true);
    public static final ForeignKey<TransactionRecord, UserRecord> TRANSACTION__FK_TRANSACTION_PK_USER = Internal.createForeignKey(Transaction.TRANSACTION, DSL.name("fk_transaction_pk_user"), new TableField[] { Transaction.TRANSACTION.USER_ID }, Keys.USER__PK_USER, new TableField[] { User.USER.ID }, true);
    public static final ForeignKey<TransactionLocationRecord, TransactionRecord> TRANSACTION_LOCATION__FK_TRANSACTION_LOCATION_PK_TRANSACTION = Internal.createForeignKey(TransactionLocation.TRANSACTION_LOCATION, DSL.name("fk_transaction_location_pk_transaction"), new TableField[] { TransactionLocation.TRANSACTION_LOCATION.TRANSACTION_ID }, Keys.TRANSACTION__PK_TRANSACTION, new TableField[] { Transaction.TRANSACTION.ID }, true);
    public static final ForeignKey<TransactionPaymentMetaRecord, TransactionRecord> TRANSACTION_PAYMENT_META__FK_TRANSACTION_PAYMENT_META_PK_TRANSACTION = Internal.createForeignKey(TransactionPaymentMeta.TRANSACTION_PAYMENT_META, DSL.name("fk_transaction_payment_meta_pk_transaction"), new TableField[] { TransactionPaymentMeta.TRANSACTION_PAYMENT_META.TRANSACTION_ID }, Keys.TRANSACTION__PK_TRANSACTION, new TableField[] { Transaction.TRANSACTION.ID }, true);
    public static final ForeignKey<UserSubscriptionRecord, UserRecord> USER_SUBSCRIPTION__FK_USER_SUBSCRIPTION_PK_USER = Internal.createForeignKey(UserSubscription.USER_SUBSCRIPTION, DSL.name("fk_user_subscription_pk_user"), new TableField[] { UserSubscription.USER_SUBSCRIPTION.USER_ID }, Keys.USER__PK_USER, new TableField[] { User.USER.ID }, true);
}
