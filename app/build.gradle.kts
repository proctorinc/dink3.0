/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java application project to get you started.
 * For more details on building Java & JVM projects, please refer to https://docs.gradle.org/8.14.2/userguide/building_java_projects.html in the Gradle documentation.
 * This project uses @Incubating APIs which are subject to change.
 */

plugins {
    // Apply the application plugin to add support for building a CLI application in Java.
    application
    id("org.springframework.boot") version "3.3.0"
    id("io.spring.dependency-management") version "1.1.4"
    java
    id("nu.studer.jooq") version "9.0"
}

repositories {
    // Use Maven Central for resolving dependencies.
    mavenCentral()
}

dependencies {
    // This dependency is used by the application.
    implementation(libs.guava)
    // Spring Boot Web
    implementation("org.springframework.boot:spring-boot-starter-web")
    // Spring Boot YAML config
    implementation("org.springframework.boot:spring-boot-starter")
    // jOOQ
    implementation("org.jooq:jooq:3.19.7")
    // SQLite JDBC
    implementation("org.xerial:sqlite-jdbc:3.45.3.0")
    // JWT
    implementation("io.jsonwebtoken:jjwt-api:0.12.5")
    runtimeOnly("io.jsonwebtoken:jjwt-impl:0.12.5")
    runtimeOnly("io.jsonwebtoken:jjwt-jackson:0.12.5")
    // Jakarta Servlet API (for filters)
    implementation("jakarta.servlet:jakarta.servlet-api:6.0.0")
    // Testing
    testImplementation("org.springframework.boot:spring-boot-starter-test")
    testImplementation("org.junit.jupiter:junit-jupiter-api:5.10.2")
    testRuntimeOnly("org.junit.jupiter:junit-jupiter-engine:5.10.2")
    jooqGenerator("org.xerial:sqlite-jdbc:3.45.3.0")
    implementation("org.springframework.boot:spring-boot-starter-security")
    implementation("org.springframework.security:spring-security-crypto:6.2.2")
    testImplementation("com.fasterxml.jackson.core:jackson-databind:2.17.1")
    developmentOnly("org.springframework.boot:spring-boot-devtools")
    implementation("org.springdoc:springdoc-openapi-starter-webmvc-ui:2.5.0")
    implementation("org.springframework.boot:spring-boot-starter-jooq")
    implementation("org.bouncycastle:bcprov-jdk18on:1.78.1")
    implementation("org.slf4j:slf4j-api:2.0.13")
    runtimeOnly("ch.qos.logback:logback-classic:1.4.14")
    jooqGenerator("org.slf4j:slf4j-simple:2.0.13")
    implementation("com.plaid:plaid-java:12.0.0")
}

testing {
    suites {
        // Configure the built-in test suite
        val test by getting(JvmTestSuite::class) {
            useJUnitJupiter()
        }
    }
}

// Apply a specific Java toolchain to ease working on different environments.
java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}

application {
    // Define the main class for the application.
    mainClass.set("com.dink3.Dink3Application")
}

tasks.test {
    useJUnitPlatform()
}

jooq {
    version.set("3.19.7")
    configurations {
        create("main") {
            generateSchemaSourceOnCompilation.set(true)
            jooqConfiguration.apply {
                logging = org.jooq.meta.jaxb.Logging.WARN
                jdbc.apply {
                    driver = "org.sqlite.JDBC"
                    url = "jdbc:sqlite:./dink3-dev.db"
                }
                generator.apply {
                    name = "org.jooq.codegen.DefaultGenerator"
                    database.apply {
                        name = "org.jooq.meta.sqlite.SQLiteDatabase"
                        inputSchema = ""
                        includes = ".*"
                        excludes = ""
                        properties.add(org.jooq.meta.jaxb.Property().withKey("scripts").withValue("app/src/main/resources/schema.sql"))
                    }
                    generate.apply {
                        isDaos = true
                        isPojos = true
                    }
                    target.apply {
                        packageName = "com.dink3.jooq"
                        directory = "src/main/generated"
                    }
                }
            }
        }
    }
}

sourceSets {
    main {
        java {
            srcDir("src/main/generated")
        }
    }
}
